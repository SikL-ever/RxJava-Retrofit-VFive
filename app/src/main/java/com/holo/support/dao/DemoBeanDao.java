package com.holo.support.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.holo.support.bean.DemoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEMO_BEAN".
*/
public class DemoBeanDao extends AbstractDao<DemoBean, String> {

    public static final String TABLENAME = "DEMO_BEAN";

    /**
     * Properties of entity DemoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Text = new Property(0, String.class, "text", true, "TEXT");
    }


    public DemoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DemoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEMO_BEAN\" (" + //
                "\"TEXT\" TEXT PRIMARY KEY NOT NULL );"); // 0: text
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEMO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DemoBean entity) {
        stmt.clearBindings();
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(1, text);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DemoBean entity) {
        stmt.clearBindings();
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(1, text);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DemoBean readEntity(Cursor cursor, int offset) {
        DemoBean entity = new DemoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // text
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DemoBean entity, int offset) {
        entity.setText(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DemoBean entity, long rowId) {
        return entity.getText();
    }
    
    @Override
    public String getKey(DemoBean entity) {
        if(entity != null) {
            return entity.getText();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DemoBean entity) {
        return entity.getText() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
